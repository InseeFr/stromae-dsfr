/*! For license information please see display.module.js.LICENSE.txt */
const config={prefix:"fr",namespace:"dsfr",organisation:"@gouvfr",version:"1.12.1"},api=window[config.namespace],DisplaySelector={DISPLAY:api.internals.ns.selector("display"),RADIO_BUTTONS:`input[name="${api.internals.ns("radios-theme")}"]`,FIELDSET:api.internals.ns.selector("fieldset")};class Display extends api.core.Instance{static get instanceClassName(){return"Display"}init(){if(this.radios=this.querySelectorAll(DisplaySelector.RADIO_BUTTONS),api.scheme){this.changing=this.change.bind(this);for(const e of this.radios)e.addEventListener("change",this.changing);this.addDescent(api.scheme.SchemeEmission.SCHEME,this.apply.bind(this)),this.ascend(api.scheme.SchemeEmission.ASK)}else this.querySelector(DisplaySelector.FIELDSET).setAttribute("disabled","")}get scheme(){return this._scheme}set scheme(e){if(this._scheme!==e&&api.scheme)switch(e){case api.scheme.SchemeValue.SYSTEM:case api.scheme.SchemeValue.LIGHT:case api.scheme.SchemeValue.DARK:this._scheme=e;for(const s of this.radios)s.checked=s.value===e;this.ascend(api.scheme.SchemeEmission.SCHEME,e)}}change(){for(const e of this.radios)if(e.checked)return void(this.scheme=e.value)}apply(e){this.scheme=e}dispose(){for(const e of this.radios)e.removeEventListener("change",this.changing)}}api.display={Display:Display,DisplaySelector:DisplaySelector},api.internals.register(api.display.DisplaySelector.DISPLAY,api.display.Display);