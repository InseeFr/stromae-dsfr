/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * queen-api
 * API for Queen/Stromae
 * OpenAPI spec version: 5.0.0-rc
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  Campaign,
  CampaignCreation,
  CampaignCreationV2,
  CampaignSummary,
  DeleteCampaignByIdParams,
} from '../models/api'
import { stromaeInstance } from './axiosInstance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER /
 * @summary Get campaign list for the current user
 */
export const getInterviewerCampaignList = (
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<CampaignSummary[]>(
    { url: `/api/campaigns`, method: 'GET', signal },
    options,
  )
}

export const getGetInterviewerCampaignListQueryKey = () => {
  return [`/api/campaigns`] as const
}

export const getGetInterviewerCampaignListQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterviewerCampaignList>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getInterviewerCampaignList>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof stromaeInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetInterviewerCampaignListQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInterviewerCampaignList>>
  > = ({ signal }) => getInterviewerCampaignList(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInterviewerCampaignList>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetInterviewerCampaignListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterviewerCampaignList>>
>
export type GetInterviewerCampaignListQueryError = unknown

export function useGetInterviewerCampaignList<
  TData = Awaited<ReturnType<typeof getInterviewerCampaignList>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterviewerCampaignList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterviewerCampaignList>>,
          TError,
          Awaited<ReturnType<typeof getInterviewerCampaignList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetInterviewerCampaignList<
  TData = Awaited<ReturnType<typeof getInterviewerCampaignList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterviewerCampaignList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterviewerCampaignList>>,
          TError,
          Awaited<ReturnType<typeof getInterviewerCampaignList>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetInterviewerCampaignList<
  TData = Awaited<ReturnType<typeof getInterviewerCampaignList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterviewerCampaignList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get campaign list for the current user
 */

export function useGetInterviewerCampaignList<
  TData = Awaited<ReturnType<typeof getInterviewerCampaignList>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterviewerCampaignList>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetInterviewerCampaignListQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @deprecated
 * @summary Create a campaign
 */
export const createCampaign = (
  campaignCreation: CampaignCreation,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<void>(
    {
      url: `/api/campaigns`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: campaignCreation,
      signal,
    },
    options,
  )
}

export const getCreateCampaignMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCampaign>>,
    TError,
    { data: CampaignCreation },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCampaign>>,
  TError,
  { data: CampaignCreation },
  TContext
> => {
  const mutationKey = ['createCampaign']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCampaign>>,
    { data: CampaignCreation }
  > = (props) => {
    const { data } = props ?? {}

    return createCampaign(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCampaignMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCampaign>>
>
export type CreateCampaignMutationBody = CampaignCreation
export type CreateCampaignMutationError = unknown

/**
 * @deprecated
 * @summary Create a campaign
 */
export const useCreateCampaign = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCampaign>>,
      TError,
      { data: CampaignCreation },
      TContext
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCampaign>>,
  TError,
  { data: CampaignCreation },
  TContext
> => {
  const mutationOptions = getCreateCampaignMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Create a campaign
 */
export const createCampaignV2 = (
  campaignCreationV2: CampaignCreationV2,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<void>(
    {
      url: `/api/campaign`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: campaignCreationV2,
      signal,
    },
    options,
  )
}

export const getCreateCampaignV2MutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCampaignV2>>,
    TError,
    { data: CampaignCreationV2 },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCampaignV2>>,
  TError,
  { data: CampaignCreationV2 },
  TContext
> => {
  const mutationKey = ['createCampaignV2']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCampaignV2>>,
    { data: CampaignCreationV2 }
  > = (props) => {
    const { data } = props ?? {}

    return createCampaignV2(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCampaignV2MutationResult = NonNullable<
  Awaited<ReturnType<typeof createCampaignV2>>
>
export type CreateCampaignV2MutationBody = CampaignCreationV2
export type CreateCampaignV2MutationError = unknown

/**
 * @summary Create a campaign
 */
export const useCreateCampaignV2 = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCampaignV2>>,
      TError,
      { data: CampaignCreationV2 },
      TContext
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCampaignV2>>,
  TError,
  { data: CampaignCreationV2 },
  TContext
> => {
  const mutationOptions = getCreateCampaignV2MutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Get list of all campaigns
 */
export const getListCampaign = (
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<CampaignSummary[]>(
    { url: `/api/admin/campaigns`, method: 'GET', signal },
    options,
  )
}

export const getGetListCampaignQueryKey = () => {
  return [`/api/admin/campaigns`] as const
}

export const getGetListCampaignQueryOptions = <
  TData = Awaited<ReturnType<typeof getListCampaign>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getListCampaign>>, TError, TData>
  >
  request?: SecondParameter<typeof stromaeInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetListCampaignQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getListCampaign>>> = ({
    signal,
  }) => getListCampaign(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getListCampaign>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetListCampaignQueryResult = NonNullable<
  Awaited<ReturnType<typeof getListCampaign>>
>
export type GetListCampaignQueryError = unknown

export function useGetListCampaign<
  TData = Awaited<ReturnType<typeof getListCampaign>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListCampaign>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getListCampaign>>,
          TError,
          Awaited<ReturnType<typeof getListCampaign>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetListCampaign<
  TData = Awaited<ReturnType<typeof getListCampaign>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListCampaign>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getListCampaign>>,
          TError,
          Awaited<ReturnType<typeof getListCampaign>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetListCampaign<
  TData = Awaited<ReturnType<typeof getListCampaign>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListCampaign>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get list of all campaigns
 */

export function useGetListCampaign<
  TData = Awaited<ReturnType<typeof getListCampaign>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListCampaign>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetListCampaignQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Get campaign
 */
export const getCampaign = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<Campaign>(
    { url: `/api/admin/campaigns/${id}`, method: 'GET', signal },
    options,
  )
}

export const getGetCampaignQueryKey = (id: string) => {
  return [`/api/admin/campaigns/${id}`] as const
}

export const getGetCampaignQueryOptions = <
  TData = Awaited<ReturnType<typeof getCampaign>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCampaign>>, TError, TData>
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetCampaignQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCampaign>>> = ({
    signal,
  }) => getCampaign(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCampaign>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCampaignQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCampaign>>
>
export type GetCampaignQueryError = unknown

export function useGetCampaign<
  TData = Awaited<ReturnType<typeof getCampaign>>,
  TError = unknown,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCampaign>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCampaign>>,
          TError,
          Awaited<ReturnType<typeof getCampaign>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCampaign<
  TData = Awaited<ReturnType<typeof getCampaign>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCampaign>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCampaign>>,
          TError,
          Awaited<ReturnType<typeof getCampaign>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCampaign<
  TData = Awaited<ReturnType<typeof getCampaign>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCampaign>>, TError, TData>
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get campaign
 */

export function useGetCampaign<
  TData = Awaited<ReturnType<typeof getCampaign>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCampaign>>, TError, TData>
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetCampaignQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Delete a campaign
 */
export const deleteCampaignById = (
  id: string,
  params: DeleteCampaignByIdParams,
  options?: SecondParameter<typeof stromaeInstance>,
) => {
  return stromaeInstance<void>(
    { url: `/api/campaign/${id}`, method: 'DELETE', params },
    options,
  )
}

export const getDeleteCampaignByIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCampaignById>>,
    TError,
    { id: string; params: DeleteCampaignByIdParams },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCampaignById>>,
  TError,
  { id: string; params: DeleteCampaignByIdParams },
  TContext
> => {
  const mutationKey = ['deleteCampaignById']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCampaignById>>,
    { id: string; params: DeleteCampaignByIdParams }
  > = (props) => {
    const { id, params } = props ?? {}

    return deleteCampaignById(id, params, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteCampaignByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCampaignById>>
>

export type DeleteCampaignByIdMutationError = unknown

/**
 * @summary Delete a campaign
 */
export const useDeleteCampaignById = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCampaignById>>,
      TError,
      { id: string; params: DeleteCampaignByIdParams },
      TContext
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCampaignById>>,
  TError,
  { id: string; params: DeleteCampaignByIdParams },
  TContext
> => {
  const mutationOptions = getDeleteCampaignByIdMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
