/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * queen-api
 * API for Queen/Stromae
 * OpenAPI spec version: 4.3.2-SNAPSHOT
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  GetCommentBySurveyUnit200,
  SetCommentBody,
  StateData,
  StateDataUpdate,
  SurveyUnit,
  SurveyUnitCreation,
  SurveyUnitDataStateDataUpdate,
  SurveyUnitSummary,
  SurveyUnitUpdate,
  SurveyUnitsOkNok,
} from '../model/api'
import type { SchemaPersonalization } from '../model/api/schema.personalization'
import type { SchemaData } from '../model/api/schema.data'
import { stromaeInstance } from './axiosInstance'
import { depositProofInstance } from './axiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Get survey-unit
 */
export const getSurveyUnitById = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<SurveyUnit>(
    { url: `/api/survey-unit/${id}`, method: 'GET', signal },
    options
  )
}

export const getGetSurveyUnitByIdQueryKey = (id: string) => {
  return [`/api/survey-unit/${id}`] as const
}

export const getGetSurveyUnitByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSurveyUnitById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurveyUnitById>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSurveyUnitByIdQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSurveyUnitById>>
  > = ({ signal }) => getSurveyUnitById(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSurveyUnitById>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSurveyUnitByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSurveyUnitById>>
>
export type GetSurveyUnitByIdQueryError = unknown

/**
 * @summary Get survey-unit
 */
export const useGetSurveyUnitById = <
  TData = Awaited<ReturnType<typeof getSurveyUnitById>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getSurveyUnitById>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSurveyUnitByIdQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Update survey-unit
 */
export const updateSurveyUnitById = (
  id: string,
  surveyUnitUpdate: SurveyUnitUpdate,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: surveyUnitUpdate,
    },
    options
  )
}

export const getUpdateSurveyUnitByIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSurveyUnitById>>,
    TError,
    { id: string; data: SurveyUnitUpdate },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSurveyUnitById>>,
  TError,
  { id: string; data: SurveyUnitUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSurveyUnitById>>,
    { id: string; data: SurveyUnitUpdate }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateSurveyUnitById(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateSurveyUnitByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSurveyUnitById>>
>
export type UpdateSurveyUnitByIdMutationBody = SurveyUnitUpdate
export type UpdateSurveyUnitByIdMutationError = unknown

/**
 * @summary Update survey-unit
 */
export const useUpdateSurveyUnitById = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSurveyUnitById>>,
    TError,
    { id: string; data: SurveyUnitUpdate },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSurveyUnitById>>,
  TError,
  { id: string; data: SurveyUnitUpdate },
  TContext
> => {
  const mutationOptions = getUpdateSurveyUnitByIdMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Delete a survey unit
 */
export const deleteSurveyUnit = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    { url: `/api/survey-unit/${id}`, method: 'DELETE' },
    options
  )
}

export const getDeleteSurveyUnitMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSurveyUnit>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSurveyUnit>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSurveyUnit>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return deleteSurveyUnit(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteSurveyUnitMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSurveyUnit>>
>

export type DeleteSurveyUnitMutationError = unknown

/**
 * @summary Delete a survey unit
 */
export const useDeleteSurveyUnit = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSurveyUnit>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSurveyUnit>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteSurveyUnitMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Update survey-unit updated data/state-data
 */
export const updateSurveyUnitDataStateDataById = (
  id: string,
  surveyUnitDataStateDataUpdate: SurveyUnitDataStateDataUpdate,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}`,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      data: surveyUnitDataStateDataUpdate,
    },
    options
  )
}

export const getUpdateSurveyUnitDataStateDataByIdMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSurveyUnitDataStateDataById>>,
    TError,
    { id: string; data: SurveyUnitDataStateDataUpdate },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSurveyUnitDataStateDataById>>,
  TError,
  { id: string; data: SurveyUnitDataStateDataUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSurveyUnitDataStateDataById>>,
    { id: string; data: SurveyUnitDataStateDataUpdate }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateSurveyUnitDataStateDataById(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateSurveyUnitDataStateDataByIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSurveyUnitDataStateDataById>>
>
export type UpdateSurveyUnitDataStateDataByIdMutationBody =
  SurveyUnitDataStateDataUpdate
export type UpdateSurveyUnitDataStateDataByIdMutationError = unknown

/**
 * @summary Update survey-unit updated data/state-data
 */
export const useUpdateSurveyUnitDataStateDataById = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSurveyUnitDataStateDataById>>,
    TError,
    { id: string; data: SurveyUnitDataStateDataUpdate },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSurveyUnitDataStateDataById>>,
  TError,
  { id: string; data: SurveyUnitDataStateDataUpdate },
  TContext
> => {
  const mutationOptions =
    getUpdateSurveyUnitDataStateDataByIdMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Get state-data for a survey unit
 */
export const getStateDataBySurveyUnit = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<StateData>(
    { url: `/api/survey-unit/${id}/state-data`, method: 'GET', signal },
    options
  )
}

export const getGetStateDataBySurveyUnitQueryKey = (id: string) => {
  return [`/api/survey-unit/${id}/state-data`] as const
}

export const getGetStateDataBySurveyUnitQueryOptions = <
  TData = Awaited<ReturnType<typeof getStateDataBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStateDataBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetStateDataBySurveyUnitQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStateDataBySurveyUnit>>
  > = ({ signal }) => getStateDataBySurveyUnit(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getStateDataBySurveyUnit>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetStateDataBySurveyUnitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStateDataBySurveyUnit>>
>
export type GetStateDataBySurveyUnitQueryError = unknown

/**
 * @summary Get state-data for a survey unit
 */
export const useGetStateDataBySurveyUnit = <
  TData = Awaited<ReturnType<typeof getStateDataBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getStateDataBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetStateDataBySurveyUnitQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Update state-data for a survey unit
 */
export const setStateData = (
  id: string,
  stateDataUpdate: StateDataUpdate,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}/state-data`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: stateDataUpdate,
    },
    options
  )
}

export const getSetStateDataMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setStateData>>,
    TError,
    { id: string; data: StateDataUpdate },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof setStateData>>,
  TError,
  { id: string; data: StateDataUpdate },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setStateData>>,
    { id: string; data: StateDataUpdate }
  > = (props) => {
    const { id, data } = props ?? {}

    return setStateData(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetStateDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof setStateData>>
>
export type SetStateDataMutationBody = StateDataUpdate
export type SetStateDataMutationError = unknown

/**
 * @summary Update state-data for a survey unit
 */
export const useSetStateData = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setStateData>>,
    TError,
    { id: string; data: StateDataUpdate },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof setStateData>>,
  TError,
  { id: string; data: StateDataUpdate },
  TContext
> => {
  const mutationOptions = getSetStateDataMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Get personalization for a survey unit
 */
export const getPersonalizationBySurveyUnit = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<SchemaPersonalization>(
    { url: `/api/survey-unit/${id}/personalization`, method: 'GET', signal },
    options
  )
}

export const getGetPersonalizationBySurveyUnitQueryKey = (id: string) => {
  return [`/api/survey-unit/${id}/personalization`] as const
}

export const getGetPersonalizationBySurveyUnitQueryOptions = <
  TData = Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPersonalizationBySurveyUnitQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>
  > = ({ signal }) => getPersonalizationBySurveyUnit(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPersonalizationBySurveyUnitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>
>
export type GetPersonalizationBySurveyUnitQueryError = unknown

/**
 * @summary Get personalization for a survey unit
 */
export const useGetPersonalizationBySurveyUnit = <
  TData = Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getPersonalizationBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPersonalizationBySurveyUnitQueryOptions(
    id,
    options
  )

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Update personalization for a survey unit
 */
export const setPersonalization = (
  id: string,
  schemaPersonalization: SchemaPersonalization,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}/personalization`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: schemaPersonalization,
    },
    options
  )
}

export const getSetPersonalizationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setPersonalization>>,
    TError,
    { id: string; data: SchemaPersonalization },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof setPersonalization>>,
  TError,
  { id: string; data: SchemaPersonalization },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setPersonalization>>,
    { id: string; data: SchemaPersonalization }
  > = (props) => {
    const { id, data } = props ?? {}

    return setPersonalization(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetPersonalizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof setPersonalization>>
>
export type SetPersonalizationMutationBody = SchemaPersonalization
export type SetPersonalizationMutationError = unknown

/**
 * @summary Update personalization for a survey unit
 */
export const useSetPersonalization = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setPersonalization>>,
    TError,
    { id: string; data: SchemaPersonalization },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof setPersonalization>>,
  TError,
  { id: string; data: SchemaPersonalization },
  TContext
> => {
  const mutationOptions = getSetPersonalizationMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Get data for a survey unit
 */
export const getDataBySurveyUnit = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<SchemaData>(
    { url: `/api/survey-unit/${id}/data`, method: 'GET', signal },
    options
  )
}

export const getGetDataBySurveyUnitQueryKey = (id: string) => {
  return [`/api/survey-unit/${id}/data`] as const
}

export const getGetDataBySurveyUnitQueryOptions = <
  TData = Awaited<ReturnType<typeof getDataBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDataBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetDataBySurveyUnitQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDataBySurveyUnit>>
  > = ({ signal }) => getDataBySurveyUnit(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDataBySurveyUnit>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetDataBySurveyUnitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDataBySurveyUnit>>
>
export type GetDataBySurveyUnitQueryError = unknown

/**
 * @summary Get data for a survey unit
 */
export const useGetDataBySurveyUnit = <
  TData = Awaited<ReturnType<typeof getDataBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDataBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDataBySurveyUnitQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Update data for a survey unit
 */
export const updateData = (
  id: string,
  schemaData: SchemaData,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}/data`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: schemaData,
    },
    options
  )
}

export const getUpdateDataMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateData>>,
    TError,
    { id: string; data: SchemaData },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateData>>,
  TError,
  { id: string; data: SchemaData },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateData>>,
    { id: string; data: SchemaData }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateData(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateData>>
>
export type UpdateDataMutationBody = SchemaData
export type UpdateDataMutationError = unknown

/**
 * @summary Update data for a survey unit
 */
export const useUpdateData = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateData>>,
    TError,
    { id: string; data: SchemaData },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof updateData>>,
  TError,
  { id: string; data: SchemaData },
  TContext
> => {
  const mutationOptions = getUpdateDataMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Get comment for a survey unit
 */
export const getCommentBySurveyUnit = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<GetCommentBySurveyUnit200>(
    { url: `/api/survey-unit/${id}/comment`, method: 'GET', signal },
    options
  )
}

export const getGetCommentBySurveyUnitQueryKey = (id: string) => {
  return [`/api/survey-unit/${id}/comment`] as const
}

export const getGetCommentBySurveyUnitQueryOptions = <
  TData = Awaited<ReturnType<typeof getCommentBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetCommentBySurveyUnitQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCommentBySurveyUnit>>
  > = ({ signal }) => getCommentBySurveyUnit(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCommentBySurveyUnit>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetCommentBySurveyUnitQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCommentBySurveyUnit>>
>
export type GetCommentBySurveyUnitQueryError = unknown

/**
 * @summary Get comment for a survey unit
 */
export const useGetCommentBySurveyUnit = <
  TData = Awaited<ReturnType<typeof getCommentBySurveyUnit>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCommentBySurveyUnit>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCommentBySurveyUnitQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Update comment for a survey unit
 */
export const setComment = (
  id: string,
  setCommentBody: SetCommentBody,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}/comment`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: setCommentBody,
    },
    options
  )
}

export const getSetCommentMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setComment>>,
    TError,
    { id: string; data: SetCommentBody },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof setComment>>,
  TError,
  { id: string; data: SetCommentBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setComment>>,
    { id: string; data: SetCommentBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return setComment(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type SetCommentMutationResult = NonNullable<
  Awaited<ReturnType<typeof setComment>>
>
export type SetCommentMutationBody = SetCommentBody
export type SetCommentMutationError = unknown

/**
 * @summary Update comment for a survey unit
 */
export const useSetComment = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setComment>>,
    TError,
    { id: string; data: SetCommentBody },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof setComment>>,
  TError,
  { id: string; data: SetCommentBody },
  TContext
> => {
  const mutationOptions = getSetCommentMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER /
 * @summary Get state-data for all survey-units defined in request body
 */
export const getStateDataBySurveyUnits = (
  getStateDataBySurveyUnitsBody: string[],
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<SurveyUnitsOkNok>(
    {
      url: `/api/survey-units/state-data`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: getStateDataBySurveyUnitsBody,
    },
    options
  )
}

export const getGetStateDataBySurveyUnitsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getStateDataBySurveyUnits>>,
    TError,
    { data: string[] },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof getStateDataBySurveyUnits>>,
  TError,
  { data: string[] },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getStateDataBySurveyUnits>>,
    { data: string[] }
  > = (props) => {
    const { data } = props ?? {}

    return getStateDataBySurveyUnits(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetStateDataBySurveyUnitsMutationResult = NonNullable<
  Awaited<ReturnType<typeof getStateDataBySurveyUnits>>
>
export type GetStateDataBySurveyUnitsMutationBody = string[]
export type GetStateDataBySurveyUnitsMutationError = unknown

/**
 * @summary Get state-data for all survey-units defined in request body
 */
export const useGetStateDataBySurveyUnits = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getStateDataBySurveyUnits>>,
    TError,
    { data: string[] },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof getStateDataBySurveyUnits>>,
  TError,
  { data: string[] },
  TContext
> => {
  const mutationOptions = getGetStateDataBySurveyUnitsMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Create/Update a survey unit
 */
export const createUpdateSurveyUnit = (
  id: string,
  surveyUnitCreation: SurveyUnitCreation,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/campaign/${id}/survey-unit`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: surveyUnitCreation,
    },
    options
  )
}

export const getCreateUpdateSurveyUnitMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUpdateSurveyUnit>>,
    TError,
    { id: string; data: SurveyUnitCreation },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createUpdateSurveyUnit>>,
  TError,
  { id: string; data: SurveyUnitCreation },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUpdateSurveyUnit>>,
    { id: string; data: SurveyUnitCreation }
  > = (props) => {
    const { id, data } = props ?? {}

    return createUpdateSurveyUnit(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateUpdateSurveyUnitMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUpdateSurveyUnit>>
>
export type CreateUpdateSurveyUnitMutationBody = SurveyUnitCreation
export type CreateUpdateSurveyUnitMutationError = unknown

/**
 * @summary Create/Update a survey unit
 */
export const useCreateUpdateSurveyUnit = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createUpdateSurveyUnit>>,
    TError,
    { id: string; data: SurveyUnitCreation },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof createUpdateSurveyUnit>>,
  TError,
  { id: string; data: SurveyUnitCreation },
  TContext
> => {
  const mutationOptions = getCreateUpdateSurveyUnitMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT /
 * @summary Get all survey-units ids
 */
export const getSurveyUnitIds = (
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<string[]>(
    { url: `/api/survey-units`, method: 'GET', signal },
    options
  )
}

export const getGetSurveyUnitIdsQueryKey = () => {
  return [`/api/survey-units`] as const
}

export const getGetSurveyUnitIdsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSurveyUnitIds>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getSurveyUnitIds>>, TError, TData>
  >
  request?: SecondParameter<typeof stromaeInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSurveyUnitIdsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSurveyUnitIds>>
  > = ({ signal }) => getSurveyUnitIds(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSurveyUnitIds>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSurveyUnitIdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSurveyUnitIds>>
>
export type GetSurveyUnitIdsQueryError = unknown

/**
 * @summary Get all survey-units ids
 */
export const useGetSurveyUnitIds = <
  TData = Awaited<ReturnType<typeof getSurveyUnitIds>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getSurveyUnitIds>>, TError, TData>
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSurveyUnitIdsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / INTERVIEWER /
 * @summary Get list of survey units linked to the current interviewer
 */
export const getInterviewerSurveyUnits = (
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<SurveyUnit[]>(
    { url: `/api/survey-units/interviewer`, method: 'GET', signal },
    options
  )
}

export const getGetInterviewerSurveyUnitsQueryKey = () => {
  return [`/api/survey-units/interviewer`] as const
}

export const getGetInterviewerSurveyUnitsQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterviewerSurveyUnits>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getInterviewerSurveyUnits>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof stromaeInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetInterviewerSurveyUnitsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInterviewerSurveyUnits>>
  > = ({ signal }) => getInterviewerSurveyUnits(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInterviewerSurveyUnits>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetInterviewerSurveyUnitsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterviewerSurveyUnits>>
>
export type GetInterviewerSurveyUnitsQueryError = unknown

/**
 * @summary Get list of survey units linked to the current interviewer
 */
export const useGetInterviewerSurveyUnits = <
  TData = Awaited<ReturnType<typeof getInterviewerSurveyUnits>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getInterviewerSurveyUnits>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInterviewerSurveyUnitsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER / SURVEY_UNIT /
 * @summary Get deposit proof for a survey unit
 */
export const generateDepositProof = (
  id: string,
  options?: SecondParameter<typeof depositProofInstance>,
  signal?: AbortSignal
) => {
  return depositProofInstance<Blob>(
    {
      url: `/api/survey-unit/${id}/deposit-proof`,
      method: 'GET',
      responseType: 'blob',
      signal,
    },
    options
  )
}

export const getGenerateDepositProofQueryKey = (id: string) => {
  return [`/api/survey-unit/${id}/deposit-proof`] as const
}

export const getGenerateDepositProofQueryOptions = <
  TData = Awaited<ReturnType<typeof generateDepositProof>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof generateDepositProof>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof depositProofInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGenerateDepositProofQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof generateDepositProof>>
  > = ({ signal }) => generateDepositProof(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof generateDepositProof>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GenerateDepositProofQueryResult = NonNullable<
  Awaited<ReturnType<typeof generateDepositProof>>
>
export type GenerateDepositProofQueryError = unknown

/**
 * @summary Get deposit proof for a survey unit
 */
export const useGenerateDepositProof = <
  TData = Awaited<ReturnType<typeof generateDepositProof>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof generateDepositProof>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof depositProofInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGenerateDepositProofQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER /
 * @summary Get list of survey units for a campaign
 */
export const getListSurveyUnitByCampaign = (
  id: string,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<SurveyUnitSummary[]>(
    { url: `/api/campaign/${id}/survey-units`, method: 'GET', signal },
    options
  )
}

export const getGetListSurveyUnitByCampaignQueryKey = (id: string) => {
  return [`/api/campaign/${id}/survey-units`] as const
}

export const getGetListSurveyUnitByCampaignQueryOptions = <
  TData = Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetListSurveyUnitByCampaignQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>
  > = ({ signal }) => getListSurveyUnitByCampaign(id, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetListSurveyUnitByCampaignQueryResult = NonNullable<
  Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>
>
export type GetListSurveyUnitByCampaignQueryError = unknown

/**
 * @summary Get list of survey units for a campaign
 */
export const useGetListSurveyUnitByCampaign = <
  TData = Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>,
  TError = unknown,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getListSurveyUnitByCampaign>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetListSurveyUnitByCampaignQueryOptions(id, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
