/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * queen-api
 * API for Queen/Stromae
 * OpenAPI spec version: 5.0.0-rc
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { InterrogationTempZone } from '../models/api'
import type { SchemaInterrogationTempZone } from '../models/api/schema.interrogation-temp-zone'
import { stromaeInstance } from './axiosInstance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Authorized roles: ADMIN / WEBCLIENT / INTERVIEWER /
 * @summary Create interrogation to temp-zone
 */
export const postInterrogationByIdInTempZone = (
  id: string,
  schemaInterrogationTempZone: SchemaInterrogationTempZone,
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<void>(
    {
      url: `/api/interrogations/${id}/temp-zone`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: schemaInterrogationTempZone,
      signal,
    },
    options,
  )
}

export const getPostInterrogationByIdInTempZoneMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postInterrogationByIdInTempZone>>,
    TError,
    { id: string; data: SchemaInterrogationTempZone },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postInterrogationByIdInTempZone>>,
  TError,
  { id: string; data: SchemaInterrogationTempZone },
  TContext
> => {
  const mutationKey = ['postInterrogationByIdInTempZone']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postInterrogationByIdInTempZone>>,
    { id: string; data: SchemaInterrogationTempZone }
  > = (props) => {
    const { id, data } = props ?? {}

    return postInterrogationByIdInTempZone(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostInterrogationByIdInTempZoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof postInterrogationByIdInTempZone>>
>
export type PostInterrogationByIdInTempZoneMutationBody =
  SchemaInterrogationTempZone
export type PostInterrogationByIdInTempZoneMutationError = unknown

/**
 * @summary Create interrogation to temp-zone
 */
export const usePostInterrogationByIdInTempZone = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postInterrogationByIdInTempZone>>,
      TError,
      { id: string; data: SchemaInterrogationTempZone },
      TContext
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postInterrogationByIdInTempZone>>,
  TError,
  { id: string; data: SchemaInterrogationTempZone },
  TContext
> => {
  const mutationOptions =
    getPostInterrogationByIdInTempZoneMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER /
 * @summary GET all interrogations in temp-zone
 */
export const getInterrogationsInTempZone = (
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal,
) => {
  return stromaeInstance<InterrogationTempZone[]>(
    { url: `/api/interrogations/temp-zone`, method: 'GET', signal },
    options,
  )
}

export const getGetInterrogationsInTempZoneQueryKey = () => {
  return [`/api/interrogations/temp-zone`] as const
}

export const getGetInterrogationsInTempZoneQueryOptions = <
  TData = Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof stromaeInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetInterrogationsInTempZoneQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInterrogationsInTempZone>>
  > = ({ signal }) => getInterrogationsInTempZone(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetInterrogationsInTempZoneQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInterrogationsInTempZone>>
>
export type GetInterrogationsInTempZoneQueryError = unknown

export function useGetInterrogationsInTempZone<
  TData = Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
          TError,
          Awaited<ReturnType<typeof getInterrogationsInTempZone>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetInterrogationsInTempZone<
  TData = Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
          TError,
          Awaited<ReturnType<typeof getInterrogationsInTempZone>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetInterrogationsInTempZone<
  TData = Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary GET all interrogations in temp-zone
 */

export function useGetInterrogationsInTempZone<
  TData = Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInterrogationsInTempZone>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof stromaeInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetInterrogationsInTempZoneQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData> }

  query.queryKey = queryOptions.queryKey

  return query
}
