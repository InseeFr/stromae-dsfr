/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * queen-application
 * API for Queen/Stromae
 * OpenAPI spec version: 4.2.1
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type {
  PostSurveyUnitByIdInTempZoneBody,
  SurveyUnitTempZoneDto,
} from '../model/api'
import { stromaeInstance } from './axiosInstance'

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1]

/**
 * Authorized roles: ADMIN / WEBCLIENT / INTERVIEWER /
 * @summary Create survey-unit to temp-zone
 */
export const postSurveyUnitByIdInTempZone = (
  id: string,
  postSurveyUnitByIdInTempZoneBody: PostSurveyUnitByIdInTempZoneBody,
  options?: SecondParameter<typeof stromaeInstance>
) => {
  return stromaeInstance<void>(
    {
      url: `/api/survey-unit/${id}/temp-zone`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: postSurveyUnitByIdInTempZoneBody,
    },
    options
  )
}

export const getPostSurveyUnitByIdInTempZoneMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>,
    TError,
    { id: string; data: PostSurveyUnitByIdInTempZoneBody },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>,
  TError,
  { id: string; data: PostSurveyUnitByIdInTempZoneBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>,
    { id: string; data: PostSurveyUnitByIdInTempZoneBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return postSurveyUnitByIdInTempZone(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSurveyUnitByIdInTempZoneMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>
>
export type PostSurveyUnitByIdInTempZoneMutationBody =
  PostSurveyUnitByIdInTempZoneBody
export type PostSurveyUnitByIdInTempZoneMutationError = unknown

/**
 * @summary Create survey-unit to temp-zone
 */
export const usePostSurveyUnitByIdInTempZone = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>,
    TError,
    { id: string; data: PostSurveyUnitByIdInTempZoneBody },
    TContext
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof postSurveyUnitByIdInTempZone>>,
  TError,
  { id: string; data: PostSurveyUnitByIdInTempZoneBody },
  TContext
> => {
  const mutationOptions =
    getPostSurveyUnitByIdInTempZoneMutationOptions(options)

  return useMutation(mutationOptions)
}
/**
 * Authorized roles: ADMIN / WEBCLIENT / REVIEWER / REVIEWER_ALTERNATIVE / INTERVIEWER /
 * @summary GET all survey-units in temp-zone
 */
export const getSurveyUnitsInTempZone = (
  options?: SecondParameter<typeof stromaeInstance>,
  signal?: AbortSignal
) => {
  return stromaeInstance<SurveyUnitTempZoneDto[]>(
    { url: `/api/survey-units/temp-zone`, method: 'GET', signal },
    options
  )
}

export const getGetSurveyUnitsInTempZoneQueryKey = () => {
  return [`/api/survey-units/temp-zone`] as const
}

export const getGetSurveyUnitsInTempZoneQueryOptions = <
  TData = Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof stromaeInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSurveyUnitsInTempZoneQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>
  > = ({ signal }) => getSurveyUnitsInTempZone(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSurveyUnitsInTempZoneQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>
>
export type GetSurveyUnitsInTempZoneQueryError = unknown

/**
 * @summary GET all survey-units in temp-zone
 */
export const useGetSurveyUnitsInTempZone = <
  TData = Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getSurveyUnitsInTempZone>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof stromaeInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSurveyUnitsInTempZoneQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}
